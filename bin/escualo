#!/usr/bin/env ruby

require 'rubygems'
require "bundler/setup"
require 'commander/import'

require_relative '../lib/escualo'

program :name, 'escualo'
program :version, Escualo::VERSION
program :description, 'escualo provisioning tool implementation for ruby'

require_relative '../lib/command'

$hostname = 'localhost'
$username = 'root'
$ssh_options = {}
global_option '-h', '--hostname HOSTNAME', String, 'The host to connect. Defaults to "localhost"' do |hostname|
  $hostname = hostname
end
global_option '-u', '--username USERNAME', String, 'The username to connect. Defaults to "root"' do |username|
  $username = username
end
global_option '--password PASSWORD', String, '' do |password|
  $ssh_options[:password] = password
end

global_option '-i', '--ssh-key PRIVATE_KEY', String, '' do |private_key|
  $ssh_options[:keys] = [private_key]
end
global_option '--ssh-port PORT', String, '' do |port|
  $ssh_options[:port] = port
end

def step(name, &block)
  say name
  block.call
end

command 'bootstrap' do |c|
    c.syntax = 'escualo bootstrap'
    c.description = 'Prepare environment to be an escualo host'
    c.option '--swap', TrueClass, 'Setup swap?'
    c.option '--monit-version VERSION', String, 'Monit version'
    c.option '--monit-password PASSWORD', String, 'Monit password. Will be prompted otherwise'
    c.option '-f', '--force', TrueClass, 'Force bootstrap even if already done?'

    c.ssh_action do |args, options, ssh|
      unless options.monit_password
        password = ask("Monit Password: ") { |q| q.echo = "*" }
        options.default monit_password: password
      end
      options.default monit_version: '5.16'

      if !options.force && Escualo::Vars.present?(ssh, :ESCUALO_BASE_VERSION)
        say "Escualo already installed. Use --force to install it anyway"
      else
        step "Configuring variables..." do
          Escualo::Vars.setup ssh
          Escualo::Vars.set_builtins ssh
        end

        step "Installing base software..." do
          Escualo::Bootstrap.install_base ssh
        end

        step "Installing and configuring monit..." do
          Escualo::Bootstrap.setup_monit ssh, options
        end

        step "Enabling swap..." do
          Escualo::Bootstrap.enable_swap ssh
        end if options.swap

        step "Installing bundler..." do
          ssh.exec! 'gem install bundler'
        end
      end
    end
end


command 'install' do |c|
    c.syntax = 'escualo install <plugin>'
    c.description = "Install plugin on host. Valid plugins are #{Escualo::Installers::PLUGINS.join(', ')}"
    c.option '--nginx-conf FILENAME', String, 'ningix config file, only for nginx plugin'
    c.ssh_action do |args, options, ssh|
      installer = Escualo::Installers.load args.first
      installer.run ssh, options
    end
end

command 'create service' do |c|
    c.syntax = 'escualo create service'
    c.description = 'Setup a micro-service deployment'
    c.action do |args, options|
        say "...."
    end
end

command 'create site' do |c|
    c.syntax = 'escualo create site'
    c.description = 'Setup an static site deployment'
    c.action do |args, options|
        say "...."
    end
end

command 'create executable' do |c|
    c.syntax = 'escualo create executable'
    c.description = 'Setup an executable command deployment'
    c.action do |args, options|
        say "...."
    end
end


command 'upload' do |c|
    c.syntax = 'escualo upload <FILE>'
    c.description = 'Upload file to host'
    c.action do |args, options|
        say "...."
    end
end

command 'vars list' do |c|
    c.syntax = 'escualo vars list'
    c.description = 'List escualo variables on host'
    c.ssh_action do |args, options, ssh|
      say Escualo::Vars.list ssh
    end
end


def parse_args_variables(args)
  args.map { |it| it.split('=') }.to_h
end

command 'vars set' do |c|
    c.syntax = 'escualo vars set <NAME>=<VALUE> [<NAME>=<VALUE>,...<NAME>=<VALUE>]'
    c.description = 'Sets one or more escualo variables on host'
    c.ssh_action do |args, options, ssh|
      Escualo::Vars.set ssh, parse_args_variables(args)
    end
end

command 'vars unset' do |c|
    c.syntax = 'escualo vars unset <NAME> [<NAME>,...<NAME>]'
    c.description = 'Unset escualo variables on host'
    c.ssh_action do |args, options, ssh|
      Escualo::Vars.unset ssh, args
    end
end

command 'vars clean' do |c|
    c.syntax = 'escualo vars clean'
    c.description = 'Unset all escualo variables on host'
    c.ssh_action do |args, options, ssh|
      Escualo::Vars.clean ssh
    end
end


module Escualo
  module Remote
    def self.attach(dir, name)
      remote_name = "escualo-#{name}-#{$hostname}"
      remote_url = "ssh://#{$username}@#{$hostname}:#{$ssh_options[:port]}/var/repo/#{name}.git"
      %x{cd #{dir} && git remote add #{remote_name} #{remote_url}}
    end

    def self.clone(dir, repo, options)
      repo_url = "https://github.com/#{repo}"
      %x{git clone #{repo_url} #{dir}}
      if options.tag
        %x{cd #{dir} && git checkout #{options.tag}}
      end
    end

    def self.remotes(dir)
      %x{cd #{dir} && git remote show}
      .split
      .select {|it| it.start_with? 'escualo-'}
    end

    def self.push(dir)
      remotes(dir)
      .each do |remote|
        %x{cd #{dir} && git push #{remote} HEAD}
      end
    end
  end
end

command 'deploy' do |c|
  c.syntax = 'escualo deploy [<name> <repo>]'
  c.description = 'Deploys repository to the given executable, service or site'
  c.option '--tag GIT_TAG', String, 'Github tag to deploy'
  c.action do |args, options|
    if args.empty?
      Escualo::Remote.push Dir.pwd
    else
      Dir.mktmpdir do |dir|
        Escualo::Remote.clone dir, args.second, options
        Escualo::Remote.attach dir, args.first
        Escualo::Remote.push dir
      end
    end
  end
end

command 'remote attach' do |c|
  c.syntax = 'escualo remote attach <name>'
  c.description = "Adds the given executable, service or site to current's repository"
  c.option '--repo-path PATH', String, 'Sets the git dir'

  c.action do |args, options|
    options.default repo_path: Dir.pwd

    Escualo::Remote.attach options.repo_path, args.first
  end
end

command 'remote show' do |c|
  c.syntax = 'escualo remote show'
  c.description = "Show attached executables, services and sites to current's repository"
  c.option '--repo-path PATH', String, 'Sets the git dir'

  c.action do |args, options|
    options.default repo_path: Dir.pwd

    Escualo::Remote.remotes(options.repo_path).each { |it| say it }
  end
end